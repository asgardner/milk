#!/bin/bash


# number of arguments to script
NBARGS=1

# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`
echo "pname = $pname"


function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : function parameters control  $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Monitors and controls function parameters"
echo "  Connects to <name>.fps.shm shared memory structures"
echo "  Argument is string match filter to select fps structures"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-hl] <stringfilter>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)          help"
echo "     $(tput bold)-l$(tput sgr0)          (l)ist fps structures"
echo ""
echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
	printf "%20s       Monitor and control function parameters\n" "$0" 
}






# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done





while getopts :hl FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    l) # list fps structures
	  echo ""
	  ls -l /tmp/*.fps.shm
	  echo ""
	  exit
    ;;
    \?) 
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1))  

### End getopts code ###






if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi


MODE=0


SF="fpsctrlstartup"
echo "fparamCTRL ${MODE} \"$1\"" > $SF
echo "exitCLI" >> $SF
milk -n fpsCTRL -f fpsctrlfifo -s $SF
